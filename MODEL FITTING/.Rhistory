to_drop_3 <- rownames(correlations)[below_indices[, 1]]
cat("Columns dropped:", paste(to_drop_3, collapse = ", "), "\n")
data <- data[, !(names(data) %in% to_drop_3)]
data$SalePrice <- log(data$SalePrice)
# The artifacts to return
return_list <- list(
data=data,
too_many_nas=to_drop_1,
too_high_corr=to_drop_2,
too_low_relation=to_drop_3,
cat_var=cat_var
)
return(return_list)
}
################################################################################
# cross_val: A general-purpose k-fold cross-validation function.
# Inputs:
# -> data: A data frame.
# -> k: Number of folds to use for cross-validation. Defaults to 10.
# -> test_prop: Proportion of dataset to use as a final testing set. The
# remaining data points will be used as train/val.
# -> linear_model: Boolean specifying whether the cross-validated model is
# linear. Defaults to TRUE (i.e. linear assumption by default).
# Returns:
# -> best_model: The best model resulting from k-fold cross-validation.
# -> metric: Value of performance metric used on best_model and the test set.
get_s <- function(data, attr) {
return(s(data[,attr], k=length(unique(data[,attr]))))
}
data <- read.csv('house-prices-advanced-regression-techniques/AmesHousing.csv')
data <- preprocess(data, remove.na=FALSE)$data
test_idx <- sample(1:nrow(data), round(nrow(data)*0.2))
test_set <- data[test_idx, ]
train_set <- data[-test_idx, ]
# Export train and test set for later use
# write.csv(test_set, "test_set.csv", row.names=FALSE)
# write.csv(train_set, "train_set.csv", row.names=FALSE)
cross_val <- function(test_set, data, k, linear_model=TRUE) {
loss.mlr <- 0
loss.gam <- 0
loss.lasso <- 0
loss.ridge <- 0
# Compute standard cross-validation for sanity check
fold_len <- round(nrow(data) / k)
for (fold in 1:k) {
val_start <- (fold-1)*fold_len + 1
val_end <- min(val_start + fold_len - 1, nrow(data))
val_fold <- data[val_start:val_end,]
train_folds <- data[-(val_start:val_end),]
# Naive MLR Model
model.mlr <- lm(SalePrice~., data=train_folds)
pred.mlr <- predict(model.mlr, newdata=val_fold)
loss.mlr <- loss.mlr + sum((pred.mlr-val_fold$SalePrice)**2)
# GAM Model
formula <- SalePrice ~
s(Neighborhood, k=length(unique(train_folds$Neighborhood))) +
s(House.Style, k=length(unique(train_folds$House.Style))) +
s(Overall.Qual, k=length(unique(train_folds$Overall.Qual))) +
s(Year.Built) +
s(Exterior.1st, k=length(unique(train_folds$Exterior.1st))) +
s(Exterior.2nd, k=length(unique(train_folds$Exterior.2nd))-1) +
s(Mas.Vnr.Area) +
s(Foundation, k=length(unique(train_folds$Foundation))) +
s(Bsmt.Qual, k=length(unique(train_folds$Bsmt.Qual))) +
s(BsmtFin.Type.1, k=length(unique(train_folds$BsmtFin.Type.1))) +
s(BsmtFin.SF.1) +
s(Total.Bsmt.SF) +
s(Gr.Liv.Area) +
s(Full.Bath, k=length(unique(train_folds$Full.Bath))) +
s(Kitchen.Qual, k=length(unique(train_folds$Kitchen.Qual))) +
s(Fireplaces, k=length(unique(train_folds$Fireplaces))) +
s(Fireplace.Qu, k=length(unique(train_folds$Fireplace.Qu))) +
s(Garage.Finish, k=length(unique(train_folds$Garage.Finish))) +
s(Garage.Cars, k=length(unique(train_folds$Garage.Cars)))
model.gam = gam(formula, data=train_folds)
pred.gam <- predict(model.gam, newdata=val_fold)
loss.gam <- loss.gam + sum((pred.gam-val_fold$SalePrice)^2)
# Structure data for linear regression models
X <- as.matrix(train_folds, ncol=20)[,-20]
Y <- as.matrix(train_folds, ncol=20)[,20]
testX = as.matrix(val_fold, ncol=20)[,-20]
testY = as.matrix(val_fold, ncol=20)[,20]
# Lasso Model
model.lasso <- cv.glmnet(X, Y, type.measure = "mse", alpha=1)
pred.lasso = predict(model.lasso, newx = testX, type = "response")
loss.lasso = loss.lasso + sum((testY - pred.lasso)^2)
# Ridge Model
model.ridge <- cv.glmnet(X, Y, type.measure = "mse", alpha=0)
pred.ridge = predict(model.ridge, newx = testX, type = "response")
loss.ridge = loss.ridge + sum((testY - pred.ridge)^2)
}
loss.mlr = sqrt(loss.mlr / nrow(data))
loss.gam = sqrt(loss.gam / nrow(data))
loss.lasso = sqrt(loss.lasso / nrow(data))
loss.ridge = sqrt(loss.ridge / nrow(data))
# Calculate final test errors for the models
mlr_model <- lm(SalePrice~., data=data)
pred.mlr <- predict(model.mlr, newdata=test_set)
testerr.mlr <- sqrt(mean((pred.mlr-test_set$SalePrice)^2))
formula <- SalePrice ~
s(Neighborhood, k=length(unique(train_set$Neighborhood))) +
s(House.Style, k=length(unique(train_set$House.Style))) +
s(Overall.Qual, k=length(unique(train_set$Overall.Qual))) +
s(Year.Built) +
s(Exterior.1st, k=length(unique(train_set$Exterior.1st))) +
s(Exterior.2nd, k=length(unique(train_set$Exterior.2nd))) +
s(Mas.Vnr.Area) +
s(Foundation, k=length(unique(train_set$Foundation))) +
s(Bsmt.Qual, k=length(unique(train_set$Bsmt.Qual))) +
s(BsmtFin.Type.1, k=length(unique(train_set$BsmtFin.Type.1))) +
s(BsmtFin.SF.1) +
s(Total.Bsmt.SF) +
s(Gr.Liv.Area) +
s(Full.Bath, k=length(unique(train_set$Full.Bath))) +
s(Kitchen.Qual, k=length(unique(train_set$Kitchen.Qual))) +
s(Fireplaces, k=length(unique(train_set$Fireplaces))) +
s(Fireplace.Qu, k=length(unique(train_set$Fireplace.Qu))) +
s(Garage.Finish, k=length(unique(train_set$Garage.Finish))) +
s(Garage.Cars, k=length(unique(train_set$Garage.Cars)))
gam_model = gam(formula, data=data)
# Create matrices for linear regression functions
X <- as.matrix(data, ncol=20)[,-20]
Y <- as.matrix(data, ncol=20)[,20]
testX = as.matrix(test_set, ncol=20)[,-20]
testY = as.matrix(test_set, ncol=20)[,20]
# Final Lasso Model
model.lasso <- cv.glmnet(X, Y, type.measure = "mse", alpha=1)
pred.lasso = predict(model.lasso, newx = testX, type = "response")
testerr.lasso = sqrt(mean(((pred.lasso - testY)^2)))
# Ridge Model
model.ridge <- cv.glmnet(X, Y, type.measure = "mse", alpha=0)
pred.ridge = predict(model.ridge, newx = testX, type = "response")
testerr.ridge = sqrt(mean(((pred.ridge - testY)^2)))
# Compute predictions of model on test set
pred <- predict(gam_model, test_set, type="response")
testerr.gam <- sqrt(mean((pred-test_set$SalePrice)^2))
return(list(
loss.mlr = loss.mlr,
loss.gam = loss.gam,
loss.lasso = loss.lasso,
loss.ridge = loss.ridge,
testerr.mlr = testerr.mlr,
testerr.gam = testerr.gam,
testerr.lasso = testerr.lasso,
testerr.ridge = testerr.ridge
))
}
cv_rsme_scores = cross_val(test_set, train_set, k=30)
cv_rsme_scores
# Plot the GAM smooths
formula <- SalePrice ~
s(Neighborhood, k=length(unique(train_set$Neighborhood))) +
s(House.Style, k=length(unique(train_set$House.Style))) +
s(Overall.Qual, k=length(unique(train_set$Overall.Qual))) +
s(Year.Built) +
s(Exterior.1st, k=length(unique(train_set$Exterior.1st))) +
s(Exterior.2nd, k=length(unique(train_set$Exterior.2nd))) +
s(Mas.Vnr.Area) +
s(Foundation, k=length(unique(train_set$Foundation))) +
s(Bsmt.Qual, k=length(unique(train_set$Bsmt.Qual))) +
s(BsmtFin.Type.1, k=length(unique(train_set$BsmtFin.Type.1))) +
s(BsmtFin.SF.1) +
s(Total.Bsmt.SF) +
s(Gr.Liv.Area) +
s(Full.Bath, k=length(unique(train_set$Full.Bath))) +
s(Kitchen.Qual, k=length(unique(train_set$Kitchen.Qual))) +
s(Fireplaces, k=length(unique(train_set$Fireplaces))) +
s(Fireplace.Qu, k=length(unique(train_set$Fireplace.Qu))) +
s(Garage.Finish, k=length(unique(train_set$Garage.Finish))) +
s(Garage.Cars, k=length(unique(train_set$Garage.Cars)))
gam_model = gam(formula, data=train_set)
preds = predict(gam_model, newdata=test_set, type="response")
# MAE transformed
mean(abs((exp(preds) - exp(test_set$SalePrice))))
# RMSE tranformed
sqrt(mean((exp(preds) - exp(test_set$SalePrice))^2))
# MSE
sqrt(mean((preds - test_set$SalePrice)^2))
par(mfrow=c(5, 4))
plot(gam_model, residuals=TRUE, scheme=1, pch=1, trans=exp, shift=mean(train_set$SalePrice), cex=0.75)
# Check assumptions of GAM
par(mfrow=c(2, 2))
gam.check(gam_model)
par(mfrow=c(1, 4))
gam.check(gam_model)
# Check assumptions of GAM
par(mfrow=c(1, 4))
gam.check(gam_model)
# resid <- residuals(gam_model)
# linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
# QQ plot
# qq.gam(gam_model, main="Residuals QQ-plot")
# Histogram of residuals
# hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Fitted values vs. residuals
# plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values")
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values")
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values", pch=1)
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values", pch=4)
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values", pch=20)
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values", pch=24)
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values", pch=22)
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values", pch=21)
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values", pch=20)
# Check assumptions of GAM
par(mfrow=c(1, 4))
resid <- residuals(gam_model)
linpred <- napredict(gam_model$na.action, gam_model$linear.predictors)
observed.y <- napredict(gam_model$na.action, gam_model$y)
# QQ plot
qq.gam(gam_model, main="Residuals QQ-plot")
# Fitted values vs. residuals
plot(linpred, resid, main = "Fitted Values vs. Residuals", xlab = "Fitted Values", ylab = "residuals")
# Histogram of residuals
hist(resid, xlab = "Residuals", main = "Histogram of residuals")
# Response vs. Fitted Values
plot(fitted(gam_model), observed.y, xlab = "Fitted Values",
ylab = "Response", main = "Response vs. Fitted Values", pch=20)
par(mfrow=c(3, 5))
# Continuous covariates + Year Built (discrete)
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=4, xlab="Year Built", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Year.Built, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=11, xlab="Finished Basement Square Footage", ylab="Sale Price ($)")
points(exp(SalePrice) ~ BsmtFin.SF.1, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=12, xlab="Total Basement Square Footage", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Total.Bsmt.SF, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=13, xlab="Above Ground Living Area Square Footage", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Gr.Liv.Area, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=7, xlab="Masonry Veneer Area", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Mas.Vnr.Area, data=train_set,cex=0.75,col=alpha('grey', 0.5))
# Ordinal Covariates
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=3, xlab="Overall Quality (1-10)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Overall.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=10, xlab="Finished Basement Rating (Poor -> Excellent)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Bsmt.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=15, xlab="Kitchen Quality (Poor -> Excellent)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Kitchen.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=16, xlab="# of Fireplaces", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Fireplaces, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=19, xlab="Size of garage in car capacity", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Garage.Cars, data=train_set,cex=0.75,col=alpha('grey', 0.5))
# Categorical Covariates
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=1, xlab="Neighborhood", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Neighborhood, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=2, xlab="House Style", ylab="Sale Price ($)")
points(exp(SalePrice) ~ House.Style, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=5, xlab="Exterior Type", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Exterior.1st, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=8, xlab="Foundation Type", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Foundation, data=train_set,cex=0.75,col=alpha('grey', 0.5))
par(mfrow=c(3, 5))
# Continuous covariates + Year Built (discrete)
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=4, xlab="Year Built", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Year.Built, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=11, xlab="Finished Basement Square Feet", ylab="Sale Price ($)")
points(exp(SalePrice) ~ BsmtFin.SF.1, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=12, xlab="Total Basement Square Feet", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Total.Bsmt.SF, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=13, xlab="Above Ground Living Area Square Feet", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Gr.Liv.Area, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=7, xlab="Masonry Veneer Area", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Mas.Vnr.Area, data=train_set,cex=0.75,col=alpha('grey', 0.5))
# Ordinal Covariates
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=3, xlab="Overall Quality (1-10)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Overall.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=10, xlab="Finished Basement Rating (Poor -> Excellent)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Bsmt.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=15, xlab="Kitchen Quality (Poor -> Excellent)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Kitchen.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=16, xlab="# of Fireplaces", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Fireplaces, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=19, xlab="Size of garage in car capacity", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Garage.Cars, data=train_set,cex=0.75,col=alpha('grey', 0.5))
# Categorical Covariates
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=1, xlab="Neighborhood", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Neighborhood, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=2, xlab="House Style", ylab="Sale Price ($)")
points(exp(SalePrice) ~ House.Style, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=5, xlab="Exterior Type", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Exterior.1st, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=8, xlab="Foundation Type", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Foundation, data=train_set,cex=0.75,col=alpha('grey', 0.5))
par(mfrow=c(3, 5))
# Continuous covariates + Year Built (discrete)
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=4, xlab="Year Built", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Year.Built, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=11, xlab="Finished Basement Square Feet", ylab="Sale Price ($)")
points(exp(SalePrice) ~ BsmtFin.SF.1, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=12, xlab="Total Basement Square Feet", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Total.Bsmt.SF, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=13, xlab="Above Ground Living Square Feet", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Gr.Liv.Area, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=7, xlab="Masonry Veneer Area", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Mas.Vnr.Area, data=train_set,cex=0.75,col=alpha('grey', 0.5))
# Ordinal Covariates
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=3, xlab="Overall Quality (1-10)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Overall.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=10, xlab="Finished Basement Rating (Poor -> Excellent)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Bsmt.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=15, xlab="Kitchen Quality (Poor -> Excellent)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Kitchen.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=16, xlab="# of Fireplaces", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Fireplaces, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=19, xlab="Size of garage in car capacity", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Garage.Cars, data=train_set,cex=0.75,col=alpha('grey', 0.5))
# Categorical Covariates
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=1, xlab="Neighborhood", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Neighborhood, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=2, xlab="House Style", ylab="Sale Price ($)")
points(exp(SalePrice) ~ House.Style, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=5, xlab="Exterior Type", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Exterior.1st, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=8, xlab="Foundation Type", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Foundation, data=train_set,cex=0.75,col=alpha('grey', 0.5))
par(mfrow=c(3, 5))
# Continuous covariates + Year Built (discrete)
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=4, xlab="Year Built", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Year.Built, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=11, xlab="Finished Basement Square Ft", ylab="Sale Price ($)")
points(exp(SalePrice) ~ BsmtFin.SF.1, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=12, xlab="Total Basement Square Ft", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Total.Bsmt.SF, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=13, xlab="Above Ground Living Area Square Ft", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Gr.Liv.Area, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=7, xlab="Masonry Veneer Area", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Mas.Vnr.Area, data=train_set,cex=0.75,col=alpha('grey', 0.5))
# Ordinal Covariates
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=3, xlab="Overall Quality (1-10)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Overall.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=10, xlab="Finished Basement Rating (Poor -> Excellent)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Bsmt.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=15, xlab="Kitchen Quality (Poor -> Excellent)", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Kitchen.Qual, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=16, xlab="# of Fireplaces", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Fireplaces, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=19, xlab="Size of garage in car capacity", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Garage.Cars, data=train_set,cex=0.75,col=alpha('grey', 0.5))
# Categorical Covariates
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=1, xlab="Neighborhood", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Neighborhood, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=2, xlab="House Style", ylab="Sale Price ($)")
points(exp(SalePrice) ~ House.Style, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=5, xlab="Exterior Type", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Exterior.1st, data=train_set,cex=0.75,col=alpha('grey', 0.5))
plot(gam_model, trans=exp, shift=mean(train_set$SalePrice),
pch=1, cex=0.75, cex.lab=1.5, select=8, xlab="Foundation Type", ylab="Sale Price ($)")
points(exp(SalePrice) ~ Foundation, data=train_set,cex=0.75,col=alpha('grey', 0.5))
